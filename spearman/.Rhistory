slope_metric <- read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/thermalsensitivity.csv")
max_metric <- read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/STmax.csv")
# Read in Full Site data
site_data = read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/gagesII_RF_2016_2020_subset.csv")
# Read in discharge data
disch.month = read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/MedianQMonth_2016_2020.csv")
# Read in dam info
damref <- read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/RF_2016_2020_Dams.csv")
# Establish site indices with major dams (distance to maj dam != 0)
dam_ind <- which(damref$RAW_DIS_NEAREST_MAJ_DAM != -999)
# Establish site indices with no major dams (distance to maj dam = -999)
nodam_ind <- which(damref$RAW_DIS_NEAREST_MAJ_DAM == -999)
## Subset data by dam_ind
site_data <- site_data[dam_ind,]
disch.month <- disch.month[dam_ind,]
slope_metric <- slope_metric[dam_ind,]
max_metric <- max_metric[dam_ind,]
slope_metric <- read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/thermalsensitivity.csv")
max_metric <- read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/STmax.csv")
# Read in Full Site data
site_data = read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/gagesII_RF_2016_2020_subset.csv")
# Read in discharge data
disch.month = read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/MedianQMonth_2016_2020.csv")
# Read in dam info
damref <- read.csv("E:/Users/Jeff/Github/stream-temperature-rf/data_raw/RF_2016_2020_Dams.csv")
# Establish site indices with major dams (distance to maj dam != 0)
dam_ind <- which(damref$RAW_DIS_NEAREST_MAJ_DAM != -999)
# Establish site indices with no major dams (distance to maj dam = -999)
nodam_ind <- which(damref$RAW_DIS_NEAREST_MAJ_DAM == -999)
## Subset data by dam_ind
site_data <- site_data[dam_ind,]
disch.month <- disch.month[dam_ind,]
slope_metric <- slope_metric[dam_ind,]
max_metric <- max_metric[dam_ind,]
#### MaxST Spearman Rank ####
# Create dataframe to store spearman ranks
maxst_df = data.frame(matrix(ncol=13,nrow=23))
# Rename columns
names(maxst_df) = c("Variable","Jan_Max","Feb_Max","Mar_Max","Apr_Max","May_Max","Jun_Max","Jul_Max","Aug_Max","Sep_Max","Oct_Max","Nov_Max","Dec_Max")
# Store variable names
maxst_df$Variable = names(jan_data)
maxst_df$Variable[6] = "MON_PPT7100_CM"
maxst_df$Variable[7] = "MON_TMP7100_DEGC"
maxst_df$Variable[23] = "MonthlyQ"
# Calculate and store Spearman Ranks
maxst_df$Jan_Max = cor(jan_data,metrics$Jan_max, method="spearman")
maxst_df$Feb_Max = cor(feb_data,metrics$Feb_max, method="spearman")
maxst_df$Mar_Max = cor(mar_data,metrics$Mar_max, method="spearman")
maxst_df$Apr_Max = cor(apr_data,metrics$Apr_max, method="spearman")
maxst_df$May_Max = cor(may_data,metrics$May_max, method="spearman")
maxst_df$Jun_Max = cor(jun_data,metrics$Jun_max, method="spearman")
maxst_df$Jul_Max = cor(jul_data,metrics$Jul_max, method="spearman")
maxst_df$Aug_Max = cor(aug_data,metrics$Aug_max, method="spearman")
maxst_df$Sep_Max = cor(sep_data,metrics$Sep_max, method="spearman")
maxst_df$Oct_Max = cor(oct_data,metrics$Oct_max, method="spearman")
maxst_df$Nov_Max = cor(nov_data,metrics$Nov_max, method="spearman")
maxst_df$Dec_Max = cor(dec_data,metrics$Dec_max, method="spearman")
#### end ####
# Create dataframe to store spearman ranks
maxst_df = data.frame(matrix(ncol=13,nrow=23))
# Rename columns
names(maxst_df) = c("Variable","Jan_Max","Feb_Max","Mar_Max","Apr_Max","May_Max","Jun_Max","Jul_Max","Aug_Max","Sep_Max","Oct_Max","Nov_Max","Dec_Max")
# Store variable names
maxst_df$Variable = names(jan_data)
maxst_df$Variable[6] = "MON_PPT7100_CM"
maxst_df$Variable[7] = "MON_TMP7100_DEGC"
maxst_df$Variable[23] = "MonthlyQ"
# Calculate and store Spearman Ranks
maxst_df$Jan_Max = cor(jan_data,max_metric$Jan_max, method="spearman")
maxst_df$Feb_Max = cor(feb_data,max_metric$Feb_max, method="spearman")
maxst_df$Mar_Max = cor(mar_data,max_metric$Mar_max, method="spearman")
maxst_df$Apr_Max = cor(apr_data,max_metric$Apr_max, method="spearman")
maxst_df$May_Max = cor(may_data,max_metric$May_max, method="spearman")
maxst_df$Jun_Max = cor(jun_data,max_metric$Jun_max, method="spearman")
maxst_df$Jul_Max = cor(jul_data,max_metric$Jul_max, method="spearman")
maxst_df$Aug_Max = cor(aug_data,max_metric$Aug_max, method="spearman")
maxst_df$Sep_Max = cor(sep_data,max_metric$Sep_max, method="spearman")
maxst_df$Oct_Max = cor(oct_data,max_metric$Oct_max, method="spearman")
maxst_df$Nov_Max = cor(nov_data,max_metric$Nov_max, method="spearman")
maxst_df$Dec_Max = cor(dec_data,max_metric$Dec_max, method="spearman")
#### Assemble Data frames for each month ####
jan_data = data.frame(site_data[,c(2:6,7,19,31:45)],JAN_Q = disch.month[,2])
feb_data = data.frame(site_data[,c(2:6,8,20,31:45)],FEB_Q = disch.month[,3])
mar_data = data.frame(site_data[,c(2:6,9,21,31:45)],MAR_Q = disch.month[,4])
apr_data = data.frame(site_data[,c(2:6,10,22,31:45)],APR_Q = disch.month[,5])
may_data = data.frame(site_data[,c(2:6,11,23,31:45)],MAY_Q = disch.month[,6])
jun_data = data.frame(site_data[,c(2:6,12,24,31:45)],JUN_Q = disch.month[,7])
jul_data = data.frame(site_data[,c(2:6,13,25,31:45)],JUL_Q = disch.month[,8])
aug_data = data.frame(site_data[,c(2:6,14,26,31:45)],AUG_Q = disch.month[,9])
sep_data = data.frame(site_data[,c(2:6,15,27,31:45)],SEP_Q = disch.month[,10])
oct_data = data.frame(site_data[,c(2:6,16,28,31:45)],OCT_Q = disch.month[,11])
nov_data = data.frame(site_data[,c(2:6,17,29,31:45)],NOV_Q = disch.month[,12])
dec_data = data.frame(site_data[,c(2:6,18,30,31:45)],DEC_Q = disch.month[,13])
#### MaxST Spearman Rank ####
# Create dataframe to store spearman ranks
maxst_df = data.frame(matrix(ncol=13,nrow=23))
# Rename columns
names(maxst_df) = c("Variable","Jan_Max","Feb_Max","Mar_Max","Apr_Max","May_Max","Jun_Max","Jul_Max","Aug_Max","Sep_Max","Oct_Max","Nov_Max","Dec_Max")
# Store variable names
maxst_df$Variable = names(jan_data)
maxst_df$Variable[6] = "MON_PPT7100_CM"
maxst_df$Variable[7] = "MON_TMP7100_DEGC"
maxst_df$Variable[23] = "MonthlyQ"
# Calculate and store Spearman Ranks
maxst_df$Jan_Max = cor(jan_data,max_metric$Jan_max, method="spearman")
maxst_df$Feb_Max = cor(feb_data,max_metric$Feb_max, method="spearman")
maxst_df$Mar_Max = cor(mar_data,max_metric$Mar_max, method="spearman")
maxst_df$Apr_Max = cor(apr_data,max_metric$Apr_max, method="spearman")
maxst_df$May_Max = cor(may_data,max_metric$May_max, method="spearman")
maxst_df$Jun_Max = cor(jun_data,max_metric$Jun_max, method="spearman")
maxst_df$Jul_Max = cor(jul_data,max_metric$Jul_max, method="spearman")
maxst_df$Aug_Max = cor(aug_data,max_metric$Aug_max, method="spearman")
maxst_df$Sep_Max = cor(sep_data,max_metric$Sep_max, method="spearman")
maxst_df$Oct_Max = cor(oct_data,max_metric$Oct_max, method="spearman")
maxst_df$Nov_Max = cor(nov_data,max_metric$Nov_max, method="spearman")
maxst_df$Dec_Max = cor(dec_data,max_metric$Dec_max, method="spearman")
#### end ####
View(maxst_df)
#### Slope Spearman Rank ####
# Create dataframe to store spearman ranks
slope_df = data.frame(matrix(ncol=13,nrow=23))
# Rename columns
names(slope_df) = c("Variable","JanSlope","FebSlope","MarSlope","AprSlope",
"MaySlope","JunSlope","JulSlope","AugSlope","SepSlope","OctSlope","NovSlope","DecSlope")
# Store variable names
slope_df$Variable = names(jan_data)
slope_df$Variable[6] = "MON_PPT7100_CM"
slope_df$Variable[7] = "MON_TMP7100_DEGC"
slope_df$Variable[23] = "MonthlyQ"
# Calculate and store Spearman Ranks
slope_df$JanSlope = cor(jan_data,slope_metric$JanTS, method="spearman")
slope_df$FebSlope = cor(feb_data,slope_metric$FebTS, method="spearman")
slope_df$MarSlope = cor(mar_data,slope_metric$MarTS, method="spearman")
slope_df$AprSlope = cor(apr_data,slope_metric$AprTS, method="spearman")
slope_df$MaySlope = cor(may_data,slope_metric$MayTS, method="spearman")
slope_df$JunSlope = cor(jun_data,slope_metric$JunTS, method="spearman")
slope_df$JulSlope = cor(jul_data,slope_metric$JulTS, method="spearman")
slope_df$AugSlope = cor(aug_data,slope_metric$AugTS, method="spearman")
slope_df$SepSlope = cor(sep_data,slope_metric$SepTS, method="spearman")
slope_df$OctSlope = cor(oct_data,slope_metric$OctTS, method="spearman")
slope_df$NovSlope = cor(nov_data,slope_metric$NovTS, method="spearman")
slope_df$DecSlope = cor(dec_data,slope_metric$DecTS, method="spearman")
#### end ####
View(slope_df)
library(ggplot2)
library(reshape)
library(dplyr)
library(RColorBrewer)
library(tidytext)
# Metric string
metric_str <- 'MaxST'
# File string
file_str <- 'max'
# Create array of month strings for saving to file
mon_list <- c('jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec')
paste('E:/Users/Jeff/StreamTemp/RandomForest/Data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[1],file_str,sub_fold,'.csv',sep="")
# Top level folder
top_fold <- 'AllSites'
# Sub folder
sub_fold <- '_all'
paste('E:/Users/Jeff/StreamTemp/RandomForest/Data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[1],file_str,sub_fold,'.csv',sep="")
paste('/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[1],file_str,sub_fold,'.csv',sep="")
# Create array of month strings for saving to file
mon_list <- c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
paste('/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[1],file_str,sub_fold,'.csv',sep="")
library(ggplot2)
library(reshape)
library(dplyr)
library(RColorBrewer)
library(tidytext)
# Create array of month strings for saving to file
mon_list <- c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
# Metric string
metric_str <- 'MaxST'
# File string
file_str <- 'max'
# Top level folder
top_fold <- 'AllSites'
# Sub folder
sub_fold <- '_all'
## Read in importance dataframes using function input strings
janimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[1],file_str,sub_fold,'.csv',sep=""))
febimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[2],file_str,sub_fold,'.csv',sep=""))
marimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[3],file_str,sub_fold,'.csv',sep=""))
aprimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[4],file_str,sub_fold,'.csv',sep=""))
mayimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[5],file_str,sub_fold,'.csv',sep=""))
junimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[6],file_str,sub_fold,'.csv',sep=""))
julimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[7],file_str,sub_fold,'.csv',sep=""))
augimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[8],file_str,sub_fold,'.csv',sep=""))
sepimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[9],file_str,sub_fold,'.csv',sep=""))
octimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[10],file_str,sub_fold,'.csv',sep=""))
novimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[11],file_str,sub_fold,'.csv',sep=""))
decimp <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",mon_list[12],file_str,sub_fold,'.csv',sep=""))
# Add dfs to a list
ST_list = list(janimp,febimp,marimp,aprimp,mayimp,junimp,julimp,augimp,sepimp,octimp,novimp,decimp)
# Calculate total MDA for each month
total_mda = rep(0,12)
for (i in seq(1,12)){
# Calculate total MDA
total_mda[i] = sum(ST_list[[i]]$MDA)
# Calculate percent of total MDA for each dataframe
ST_list[[i]]$Per_MDA = 100*ST_list[[i]]$MDA/total_mda[i]
}
View(sepimp)
# Assign variable groups and months to each monthly dataframe
for (i in seq(1,12)){
# Assign group ID
ST_list[[i]]$Group = c("Hydrology","Climate","Climate","Hydrology","Climate","Climate","Climate",
"Hydrology","Human","Watershed","Human","Hydrology","Watershed","Human",
"Hydrology","Watershed","Hydrology","Watershed","Watershed","Watershed","Watershed","Watershed", "Hydrology")
# Assign month ID
ST_list[[i]]$Month = month.abb[i]
# Rename PPT and TEMP variable names to fix faceting problem
ST_list[[i]]$X[6:7] = c("MON_PPT7100_CM", "MON_TMP7100_DEGC")
# Rename Discharge variable names to fix faceting problem
ST_list[[i]]$X[23] = "MON_MEDIAN_Q"
}
# Create dataframe to store ground importance totals
group_import = data.frame(matrix(ncol=12,nrow=4))
names(group_import) = month.abb
rownames(group_import) = c('Watershed','Climate','Human','Hydrology')
# Calculate grouped importance values as a proportion of total MDA
for (i in seq(1,12)){
# Watershed grouped import %
group_import[1,i] = 100*sum(ST_list[[i]]$MDA[c(10,13,16,18,19,20,21,22)])/total_mda[i]
# Climate grouped import %
group_import[2,i] = 100*sum(ST_list[[i]]$MDA[c(2,3,5,6,7)])/total_mda[i]
# Human grouped import %
group_import[3,i] = 100*sum(ST_list[[i]]$MDA[c(9,11,14)])/total_mda[i]
# Hydrology grouped import %
group_import[4,i] = 100*sum(ST_list[[i]]$MDA[c(1,4,8,12,15,17,23)])/total_mda[i]
}
# Create dataframe in correct format for heatmap using melt
ST_heatdf = melt(group_import)
names(ST_heatdf) = c("Month","Importance")
# Add column with variable names
ST_heatdf$variable = rep(c('Watershed','Climate','Human','Hydrology'),12)
# Combine all dataframes with full variables for heat map
ST_allvar_heat = bind_rows(ST_list)
# Convert month to factor
ST_allvar_heat$Month = factor(ST_allvar_heat$Month,levels = month.abb)
# Read in spearman rank correlations based on input strings
spearman <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/SpearmanRank/',top_fold,"/",file_str,sub_fold,'_spearman.csv',sep=""))
# Melt max_spearman to mach format of importance DF
melt_spearman = melt(spearman)
# Rename dataframe
names(melt_spearman) = c("Variable","Month","Spearman")
# Add spearman correlation values to dataframe
ST_allvar_heat$Spearman = melt_spearman$Spearman
# Create labels for new axis labels
rf_labs = c("Drainage Area", "Annual Precipitation", "Relative Humidity", "Snow Percentage",
"Precipitation Seasonality", "Montly Precipitation", "Monthly Air Temp.", "Baseflow Index",
"Dam Storage","Forest LC", "Agricultural LC", "Wetland LC", "Riparian Forest LC",
"Impervious LC", "Soil Water Capacity", "Subsurface Permeability", "Water Table Depth",
"Bedrock Depth", "Watershed Elevation", "Watershed Slope", "Aspect (Northness)", "Aspect (Eastness)", "Median Monthly Discharge")
rf_labs = rep(rf_labs, 12)
# Assign names to variables
ST_allvar_heat$X = rf_labs
# Combine percent importance into one dataframe for ordering heatmap
ST_df = data.frame(Variable = janimp$X, Group = ST_list[[1]]$Group,Jan = ST_list[[1]]$Per_MDA, Feb = ST_list[[2]]$Per_MDA, Mar = ST_list[[3]]$Per_MDA,
Apr = ST_list[[4]]$Per_MDA, May = ST_list[[5]]$Per_MDA, Jun = ST_list[[6]]$Per_MDA, Jul = ST_list[[7]]$Per_MDA,
Aug = ST_list[[8]]$Per_MDA, Sept = ST_list[[9]]$Per_MDA, Oct = ST_list[[10]]$Per_MDA, Nov = ST_list[[11]]$Per_MDA,
Dec = ST_list[[12]]$Per_MDA)
# Calculate total percent importance across variables
ST_df$TotalImp = rowSums(ST_df[3:14])
# Order plots by All sites subset, or by HUC0102 subset
print(ST_allvar_heat %>%
mutate(X = reorder_within(X,rep(ST_df$TotalImp,12), Group)) %>%
ggplot(aes(Month, X)) +
geom_point(aes(size=Per_MDA,color=Spearman)) +
scale_size_continuous(range = c(0,5),limits = c(0,90),breaks=c(0,20,40,60,80)) +
facet_grid(Group~.,scales = "free",space = 'free_y') +
scale_color_gradient2(low="#4575b4",mid="gray",high="#d73027",midpoint=0,limits=c(-1,1))  +
labs(x="",
y="",
color = "Spearman \nCorrelation",
size = "% Importance") +
scale_x_discrete(position = "top") +
theme_bw() +
theme(panel.spacing = unit(.25,"lines"),
axis.text.x = element_text(color='black',size=8,angle = 45, vjust = 0, hjust=0),
axis.text.y = element_text(color="black",size=8),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour="black"),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour="black",size=10,face="bold"),
legend.key.height=grid::unit(.8,"cm"),
legend.key.width=grid::unit(.4,"cm"),
panel.grid.major.x = element_line(size = .25),
panel.grid.major.y = element_line(size = .25),
axis.ticks = element_line(color = "black")) +
ggtitle(paste(metric,subset,sep=" ")))
metric="Max"
# Order plots by All sites subset, or by HUC0102 subset
print(ST_allvar_heat %>%
mutate(X = reorder_within(X,rep(ST_df$TotalImp,12), Group)) %>%
ggplot(aes(Month, X)) +
geom_point(aes(size=Per_MDA,color=Spearman)) +
scale_size_continuous(range = c(0,5),limits = c(0,90),breaks=c(0,20,40,60,80)) +
facet_grid(Group~.,scales = "free",space = 'free_y') +
scale_color_gradient2(low="#4575b4",mid="gray",high="#d73027",midpoint=0,limits=c(-1,1))  +
labs(x="",
y="",
color = "Spearman \nCorrelation",
size = "% Importance") +
scale_x_discrete(position = "top") +
theme_bw() +
theme(panel.spacing = unit(.25,"lines"),
axis.text.x = element_text(color='black',size=8,angle = 45, vjust = 0, hjust=0),
axis.text.y = element_text(color="black",size=8),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour="black"),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour="black",size=10,face="bold"),
legend.key.height=grid::unit(.8,"cm"),
legend.key.width=grid::unit(.4,"cm"),
panel.grid.major.x = element_line(size = .25),
panel.grid.major.y = element_line(size = .25),
axis.ticks = element_line(color = "black")) +
ggtitle(paste(metric,subset,sep=" ")))
ST_allvar_heat %>%
mutate(X = reorder_within(X,rep(ST_df$TotalImp,12), Group)) %>%
ggplot(aes(Month, X)) +
geom_point(aes(size=Per_MDA,color=Spearman)) +
scale_size_continuous(range = c(0,5),limits = c(0,90),breaks=c(0,20,40,60,80)) +
facet_grid(Group~.,scales = "free",space = 'free_y') +
scale_color_gradient2(low="#4575b4",mid="gray",high="#d73027",midpoint=0,limits=c(-1,1))  +
labs(x="",
y="",
color = "Spearman \nCorrelation",
size = "% Importance") +
scale_x_discrete(position = "top") +
theme_bw() +
theme(panel.spacing = unit(.25,"lines"),
axis.text.x = element_text(color='black',size=8,angle = 45, vjust = 0, hjust=0),
axis.text.y = element_text(color="black",size=8),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour="black"),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour="black",size=10,face="bold"),
legend.key.height=grid::unit(.8,"cm"),
legend.key.width=grid::unit(.4,"cm"),
panel.grid.major.x = element_line(size = .25),
panel.grid.major.y = element_line(size = .25),
axis.ticks = element_line(color = "black")) +
ggtitle(paste(metric,subset,sep=" "))
subset = "All"
metric="Max"
# Order plots by All sites subset, or by HUC0102 subset
print(ST_allvar_heat %>%
mutate(X = reorder_within(X,rep(ST_df$TotalImp,12), Group)) %>%
ggplot(aes(Month, X)) +
geom_point(aes(size=Per_MDA,color=Spearman)) +
scale_size_continuous(range = c(0,5),limits = c(0,90),breaks=c(0,20,40,60,80)) +
facet_grid(Group~.,scales = "free",space = 'free_y') +
scale_color_gradient2(low="#4575b4",mid="gray",high="#d73027",midpoint=0,limits=c(-1,1))  +
labs(x="",
y="",
color = "Spearman \nCorrelation",
size = "% Importance") +
scale_x_discrete(position = "top") +
theme_bw() +
theme(panel.spacing = unit(.25,"lines"),
axis.text.x = element_text(color='black',size=8,angle = 45, vjust = 0, hjust=0),
axis.text.y = element_text(color="black",size=8),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour="black"),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour="black",size=10,face="bold"),
legend.key.height=grid::unit(.8,"cm"),
legend.key.width=grid::unit(.4,"cm"),
panel.grid.major.x = element_line(size = .25),
panel.grid.major.y = element_line(size = .25),
axis.ticks = element_line(color = "black")) +
ggtitle(paste(metric,subset,sep=" ")))
# Plot grouped importance as proportional area plot
# Format ST_heatdf
ST_heatdf2 = ST_heatdf
ST_heatdf2$Month = rep(seq(0,11), each=4)
ST_heatdf2$variable = factor(ST_heatdf2$variable, levels = c("Watershed", "Hydrology", "Human", "Climate"))
print(ggplot(ST_heatdf2, aes(x=Month, y=Importance, fill=variable)) +
geom_area( color="black",size=.5) +
scale_fill_manual(values=alpha(c("#FDF39A", "#4E95A4","#EDA364","#DF5C42"),alpha=0.75)) +
scale_x_continuous(breaks = 0:11,
labels = c("Jan","Feb",'Mar','Apr','May',
'Jun','Jul','Aug','Sep','Oct','Nov','Dec'),
expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_fixed(ratio = .06) +
ylab("Percent Importance") +
theme_classic() +
theme(axis.title.x=element_blank())+
ggtitle(paste(metric,subset, "Grouped Importance",sep=" ")))
print(ST_allvar_v2 %>%
mutate(X = reorder_within(X,rep(ST_df$TotalImp,12), Group)) %>%
ggplot(aes(Month, X)) +
geom_text(aes(label=Per_MDA,color=Spearman,size=40)) +
scale_size_continuous(range = c(0,5),limits = c(0,80),breaks=c(0,20,40,60,80)) +
facet_grid(Group~.,scales = "free",space = 'free_y') +
scale_color_gradient2(low="#4575b4",mid="gray",high="#d73027",midpoint=0,limits=c(-1,1))  +
labs(x="",
y="",
title = paste(metric,subset),
color = "Spearman \nCorrelation",
size = "% Importance") +
scale_x_discrete(position = "top") +
theme_bw() +
theme(panel.spacing = unit(.25,"lines"),
axis.text.x = element_text(color='black',size=8,angle = 45, vjust = 0, hjust=0),
axis.text.y = element_text(color="black",size=8),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour="black"),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour="black",size=10,face="bold"),
legend.key.height=grid::unit(.8,"cm"),
legend.key.width=grid::unit(.4,"cm"),
panel.grid.major.x = element_line(size = .25),
panel.grid.major.y = element_line(size = .25),
axis.ticks = element_line(color = "black")))
ST_allvar_v2 = ST_allvar_heat
ST_allvar_v2$Per_MDA = round(ST_allvar_v2$Per_MDA, 2)
print(ST_allvar_v2 %>%
mutate(X = reorder_within(X,rep(ST_df$TotalImp,12), Group)) %>%
ggplot(aes(Month, X)) +
geom_text(aes(label=Per_MDA,color=Spearman,size=40)) +
scale_size_continuous(range = c(0,5),limits = c(0,80),breaks=c(0,20,40,60,80)) +
facet_grid(Group~.,scales = "free",space = 'free_y') +
scale_color_gradient2(low="#4575b4",mid="gray",high="#d73027",midpoint=0,limits=c(-1,1))  +
labs(x="",
y="",
title = paste(metric,subset),
color = "Spearman \nCorrelation",
size = "% Importance") +
scale_x_discrete(position = "top") +
theme_bw() +
theme(panel.spacing = unit(.25,"lines"),
axis.text.x = element_text(color='black',size=8,angle = 45, vjust = 0, hjust=0),
axis.text.y = element_text(color="black",size=8),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour="black"),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour="black",size=10,face="bold"),
legend.key.height=grid::unit(.8,"cm"),
legend.key.width=grid::unit(.4,"cm"),
panel.grid.major.x = element_line(size = .25),
panel.grid.major.y = element_line(size = .25),
axis.ticks = element_line(color = "black")))
# Organize ST_allvar into dataframe
ST_allvar_df = data.frame(X = ST_allvar_v2$X[1:23], Group = ST_allvar_v2$Group[1:23],
Jan = ST_allvar_v2$Per_MDA[1:23], Feb = ST_allvar_v2$Per_MDA[24:46],
Mar = ST_allvar_v2$Per_MDA[47:69], Apr = ST_allvar_v2$Per_MDA[70:92],
May = ST_allvar_v2$Per_MDA[93:115], Jun = ST_allvar_v2$Per_MDA[116:138],
Jul = ST_allvar_v2$Per_MDA[139:161], Aug = ST_allvar_v2$Per_MDA[162:184],
Sep = ST_allvar_v2$Per_MDA[185:207], Oct = ST_allvar_v2$Per_MDA[208:230],
Nov = ST_allvar_v2$Per_MDA[231:253], Dec = ST_allvar_v2$Per_MDA[254:276])
# Calculate average importance values across all months
ST_allvar_df$MeanImp = rowMeans(ST_allvar_df[,3:14])
# Calculate average importance values across all months
ST_allvar_df$MeanImp = rowMeans(ST_allvar_df[,3:14])
# Read in error dataframe
errordf <- read.csv(paste('E:/Users/Jeff/stream-temperature-rf/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/cv1_",file_str,sub_fold,'_error.csv',sep=""))
# Read in error dataframe
errordf <- read.csv(paste('E:/Users/Jeff/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/cv1_",file_str,sub_fold,'_error.csv',sep=""))
# Read in error dataframe
errordf <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/cv1_",file_str,sub_fold,'_error.csv',sep=""))
# Assemble test and training nrmse values for plotting
nrmse_plot_cv1 <- data.frame(mon = rep(mon_list,2),set = c(rep('test',12),rep('train',12)), nrmse = rep(0,24))
# Assign values of mean nrmse
nrmse_plot_cv1$nrmse[1:12] <- errordf$test_nrmse
nrmse_plot_cv1$nrmse[13:24] <- errordf$train_nrmse
# Convert groups to factor
nrmse_plot_cv1$set = factor(nrmse_plot$set, levels = c("train","test"))
nrmse_plot_cv1$mon = factor(nrmse_plot$mon, levels = mon_list)
# Create error bar plot
print(ggplot(nrmse_plot_cv1, aes(x=mon, y=nrmse, fill=set)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
scale_fill_manual(labels = c("Training Set", "Test Set"),values = c('#a6eaff','#1f78b4')) +
scale_y_continuous(expand = c(0,0),limits = c(0,0.8)) +
labs(fill = "") +
xlab("") + ylab("Normalized RMSE")+
ggtitle(paste(metric,subset, "Model Error",sep=" ")) +
theme_bw() +
theme(panel.grid.major = element_blank()))
# Read in error dataframe
errordf <- read.csv(paste('E:/Users/Jeff/Github/stream-temperature-rf/data_results/',top_fold,"/",metric_str,sub_fold,"/",file_str,sub_fold,'_error.csv',sep=""))
# Assemble test and training nrmse values for plotting
nrmse_plot <- data.frame(mon = rep(mon_list,2),set = c(rep('test',12),rep('train',12)), mean_nrmse = rep(0,24), sd_nrmse = rep(0,24))
# Assign values of mean nrmse
nrmse_plot$mean_nrmse[1:12] <- errordf$test_nrmse
nrmse_plot$mean_nrmse[13:24] <- errordf$train_nrmse
# Assign values of sd nrmse
nrmse_plot$sd_nrmse[1:12] <- errordf$test_nrmse_sd
nrmse_plot$sd_nrmse[13:24] <- errordf$train_nrmse_sd
# Convert groups to factor
nrmse_plot$set = factor(nrmse_plot$set, levels = c("train","test"))
nrmse_plot$mon = factor(nrmse_plot$mon, levels = mon_list)
# Create error bar plot
print(ggplot(nrmse_plot, aes(x=mon, y=mean_nrmse, fill=set)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean_nrmse - sd_nrmse, ymax=mean_nrmse + sd_nrmse), width=.2,
position=position_dodge(.9)) +
scale_fill_manual(labels = c("Training Set", "Test Set"),values = c('#a6eaff','#1f78b4')) +
scale_y_continuous(expand = c(0,0),limits = c(0,0.8)) +
labs(fill = "") +
xlab("") + ylab("Normalized RMSE")+
ggtitle(paste(metric,subset, "Model Error (5-fold)",sep=" ")) +
theme_bw() +
theme(panel.grid.major = element_blank()))
# Import RF visualization function
source("E:/Users/Jeff/Github/stream-temperature-rf/visualization/RF_visfunc.R")
